// src/app/api/saveFeatureAData/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
    const data = await request.json();

    const GITHUB_TOKEN = process.env.GITHUB_TOKEN;
    const owner = process.env.GITHUB_OWNER;
    const repo = process.env.GITHUB_REPO;
    const path = process.env.GITHUB_PATH;
    const baseBranch = process.env.GITHUB_BASE_BRANCH;
    const newBranchName = `featureA-update-`//${Date.now()}`;

    if (!GITHUB_TOKEN || !owner || !repo || !path || !baseBranch) {
        return NextResponse.json(
            { error: 'GitHub configuration not properly set' },
            { status: 500 }
        );
    }

    try {
        // Step 1: Get the latest commit SHA of the base branch
        const branchResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/git/ref/heads/${baseBranch}`,
            {
                headers: {
                    Authorization: `Bearer ${GITHUB_TOKEN}`,
                    'Content-Type': 'application/json',
                },
            }
        );

        if (!branchResponse.ok) {
            throw new Error('Failed to get branch information from GitHub');
        }

        const branchData = await branchResponse.json();
        const latestCommitSha = branchData.object.sha;

        // Step 2: Create a new branch
        const createBranchResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/git/refs`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${GITHUB_TOKEN}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    ref: `refs/heads/${newBranchName}`,
                    sha: latestCommitSha,
                }),
            }
        );

        if (!createBranchResponse.ok) {
            throw new Error('Failed to create a new branch on GitHub');
        }

        // Step 3: Update the file in the new branch
        const fileResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/contents/${path}?ref=${newBranchName}`,
            {
                headers: {
                    Authorization: `Bearer ${GITHUB_TOKEN}`,
                    'Content-Type': 'application/json',
                },
            }
        );

        let fileSha = undefined;
        if (fileResponse.ok) {
            const fileData = await fileResponse.json();
            fileSha = fileData.sha;
        }

        const content = Buffer.from(JSON.stringify(data, null, 2)).toString('base64');

        const updateFileResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/contents/${path}`,
            {
                method: 'PUT',
                headers: {
                    Authorization: `Bearer ${GITHUB_TOKEN}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    message: 'Update data.json via API',
                    content: content,
                    sha: fileSha,
                    branch: newBranchName,
                }),
            }
        );

        if (!updateFileResponse.ok) {
            throw new Error('Failed to update the file on GitHub');
        }

        // Step 4: Create a pull request
        const createPrResponse = await fetch(
            `https://api.github.com/repos/${owner}/${repo}/pulls`,
            {
                method: 'POST',
                headers: {
                    Authorization: `Bearer ${GITHUB_TOKEN}`,
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    title: `Update data.json via app`,
                    head: newBranchName,
                    base: baseBranch,
                    body: 'This PR was automatically generated by the application.',
                }),
            }
        );

        if (!createPrResponse.ok) {
            throw new Error('Failed to create a pull request on GitHub');
        }

        const prData = await createPrResponse.json();

        return NextResponse.json({
            message: 'Pull request created successfully',
            pullRequestUrl: prData.html_url,
        });
    } catch (error: any) {
        console.error(error);
        return NextResponse.json({ error: error.message }, { status: 500 });
    }
}